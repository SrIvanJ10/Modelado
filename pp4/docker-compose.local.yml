services:
  app:
    build:
      context: .
    container_name: webapp-backend
    ports:
      - "8000:8000"
    volumes:
      - ./webapp:/home/app
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    depends_on:
      - db
      - redis
    env_file: ".env_local"

  db:
    image: postgres:13-alpine
    container_name: webapp-postgresql
    volumes:
      - postgres_data:/var/lib/postgresql/data/  # Volumen persistente para la BD
    env_file: ".env_local"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  celery-worker:
    build:
      context: .
    container_name: celery-worker-webapp
    command: celery -A app worker --loglevel=DEBUG
    volumes:
      - ./webapp:/home/app
    depends_on:
      - app
      - redis
      - db
    env_file: ".env_local"
    networks:
      - default

  celery-beat:
    build:
      context: .
    container_name: celery-beat-webapp
    command: celery -A app beat --loglevel=DEBUG
    volumes:
      - ./webapp:/home/app
    depends_on:
      - app
      - redis
      - db
    env_file: ".env_local"
    networks:
      - default

  redis:
    image: redis:alpine
    container_name: redis-webapp
    ports:
      - "6379:6379"
    networks:
      - default

networks:
  default:
    external:
      name: mydss

# El resto de tu configuración (celery, redis, etc.)

volumes:
  postgres_data:  # Definición del volumen para PostgreSQL